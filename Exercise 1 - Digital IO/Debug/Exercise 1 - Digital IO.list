
Exercise 1 - Digital IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00001384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00001384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001384  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000415  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012a  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000018f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014c91  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000620  00000000  00000000  00016627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000722ad  00000000  00000000  00016c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00088ef4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  00088f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00088ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000364 	.word	0x08000364

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000364 	.word	0x08000364

080001d4 <enable_clocks>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <enable_clocks+0x28>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <enable_clocks+0x28>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
	BX LR @ return from function call
	*/


	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <enable_clocks+0x28>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <enable_clocks+0x28>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	61d3      	str	r3, [r2, #28]
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
	STR R1, [R0, APB1ENR] @ enable the timer
	BX LR @ return
	*/
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000206:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <initialise_board+0x20>)
 8000208:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000210:	801a      	strh	r2, [r3, #0]
					@ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
								@ the MODER settings for pe8-15
	BX LR @ return from function call
	*/
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	48001002 	.word	0x48001002

08000224 <trigger_prescaler>:


void trigger_prescaler() {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0

	TIM2->ARR = 0x01;
 8000228:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800022c:	2201      	movs	r2, #1
 800022e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0x00;
 8000230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000234:	2200      	movs	r2, #0
 8000236:	625a      	str	r2, [r3, #36]	@ 0x24
	asm("NOP");
 8000238:	bf00      	nop
	asm("NOP");
 800023a:	bf00      	nop
	asm("NOP");
 800023c:	bf00      	nop
	TIM2->ARR = 0xffffffff;
 800023e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000242:	f04f 32ff 	mov.w	r2, #4294967295
 8000246:	62da      	str	r2, [r3, #44]	@ 0x2c
	LDR R1, =0xffffffff @ set the ARR back to the default value
	STR R1, [R0, TIM_ARR] @ set the ARR register

	BX LR
	*/
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <main>:



//  general purpose timer registers page 647
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0

	uint32_t on_time = 0x80000;
 800025a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800025e:	60fb      	str	r3, [r7, #12]
	uint32_t off_time = 0x100000;
 8000260:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000264:	60bb      	str	r3, [r7, #8]


	enable_clocks();
 8000266:	f7ff ffb5 	bl	80001d4 <enable_clocks>
	initialise_board();
 800026a:	f7ff ffc9 	bl	8000200 <initialise_board>
	BL enable_peripheral_clocks
	BL initialise_discovery_board
	*/


	TIM2->CR1 |= TIM_CR1_CEN;
 800026e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6013      	str	r3, [r2, #0]

	MOV R1, #0b1 @ store a 1 in bit zero for the CEN flag
	STR R1, [R0, TIM_CR1] @ enable the timer
	*/

	TIM2->PSC = 0x04;
 800027e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000282:	2204      	movs	r2, #4
 8000284:	629a      	str	r2, [r3, #40]	@ 0x28
	trigger_prescaler();
 8000286:	f7ff ffcd 	bl	8000224 <trigger_prescaler>

	@ questions for timed_loop
	@  what can make it run faster/slower (there are multiple ways)
	*/

	uint8_t led_mask_pattern = 0b01010101;
 800028a:	2355      	movs	r3, #85	@ 0x55
 800028c:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <main+0x70>)
 8000290:	603b      	str	r3, [r7, #0]

	/* Loop forever */
	for(;;) {

		TIM2->CNT = 0;
 8000292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000296:	2200      	movs	r2, #0
 8000298:	625a      	str	r2, [r3, #36]	@ 0x24

		// turn on the LEDs
		*led_output_register = led_mask_pattern;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	79fa      	ldrb	r2, [r7, #7]
 800029e:	701a      	strb	r2, [r3, #0]
			LDR R2, [R2]

		*/


		while (TIM2->CNT < on_time) {} ;
 80002a0:	bf00      	nop
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002a8:	68fa      	ldr	r2, [r7, #12]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d8f9      	bhi.n	80002a2 <main+0x4e>
			B pwm_loop_inner

		*/

		// turn off the LEDs
		*led_output_register = 0x00;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]

		while (TIM2->CNT < off_time) {};
 80002b4:	bf00      	nop
 80002b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d8f9      	bhi.n	80002b6 <main+0x62>
		TIM2->CNT = 0;
 80002c2:	e7e6      	b.n	8000292 <main+0x3e>
 80002c4:	48001015 	.word	0x48001015

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ffab 	bl	8000254 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC1_2_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	@ (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	@ (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	@ (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	@ (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
