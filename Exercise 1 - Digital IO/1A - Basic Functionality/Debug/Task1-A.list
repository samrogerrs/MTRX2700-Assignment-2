
Task1-A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000438  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00001438  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00001438  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000438  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000434  08000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001438  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a50  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026f  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000069  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d64  00000000  00000000  00002231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ad3  00000000  00000000  00016f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000726c4  00000000  00000000  00017a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a12c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000017c  00000000  00000000  0008a170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0008a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000418 	.word	0x08000418

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <EXTI0_IRQHandler>:

/**
 * @brief EXTI0 IRQ Handler for button press
 */
void EXTI0_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    // Toggle LED halves
    dio_toggle_led_halves();
 8000268:	f000 f866 	bl	8000338 <dio_toggle_led_halves>

    // Reset the interrupt
    EXTI->PR |= EXTI_PR_PR0;
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <EXTI0_IRQHandler+0x18>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a02      	ldr	r2, [pc, #8]	@ (800027c <EXTI0_IRQHandler+0x18>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6153      	str	r3, [r2, #20]
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010400 	.word	0x40010400

08000280 <enable_clocks>:

/**
 * @brief Enable clocks for needed peripherals
 */
static void enable_clocks(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <enable_clocks+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <enable_clocks+0x1c>)
 800028a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800028e:	6153      	str	r3, [r2, #20]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000

080002a0 <initialise_board>:

/**
 * @brief Initialize board I/O
 */
static void initialise_board(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
    // Configure LED pins (PE8-PE15) as outputs
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <initialise_board+0x28>)
 80002a8:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002b0:	801a      	strh	r2, [r3, #0]

    // Initialize LEDs - turn on first half
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002b2:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <initialise_board+0x2c>)
 80002b4:	603b      	str	r3, [r7, #0]
    *led_register = 0x0F;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	220f      	movs	r2, #15
 80002ba:	701a      	strb	r2, [r3, #0]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	48001002 	.word	0x48001002
 80002cc:	48001015 	.word	0x48001015

080002d0 <enable_interrupt>:

/**
 * @brief Configure and enable button interrupt
 */
static void enable_interrupt(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d4:	b672      	cpsid	i
}
 80002d6:	bf00      	nop
    // Disable interrupts during configuration
    __disable_irq();

    // Enable system configuration controller
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <enable_interrupt+0x48>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000318 <enable_interrupt+0x48>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6193      	str	r3, [r2, #24]

    // Configure PA0 as EXTI0 source
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <enable_interrupt+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]

    // Configure EXTI0 to trigger on rising edge
    EXTI->RTSR |= EXTI_RTSR_TR0;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <enable_interrupt+0x50>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000320 <enable_interrupt+0x50>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6093      	str	r3, [r2, #8]

    // Enable EXTI0 interrupt
    EXTI->IMR |= EXTI_IMR_MR0;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <enable_interrupt+0x50>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a09      	ldr	r2, [pc, #36]	@ (8000320 <enable_interrupt+0x50>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]

    // Configure NVIC for EXTI0 interrupt
    NVIC_SetPriority(EXTI0_IRQn, 1);
 8000302:	2101      	movs	r1, #1
 8000304:	2006      	movs	r0, #6
 8000306:	f7ff ff83 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800030a:	2006      	movs	r0, #6
 800030c:	f7ff ff62 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000310:	b662      	cpsie	i
}
 8000312:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40021000 	.word	0x40021000
 800031c:	40010000 	.word	0x40010000
 8000320:	40010400 	.word	0x40010400

08000324 <dio_init>:

/**
 * @brief Initialize the Digital I/O module
 */
void dio_init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    // Initialize hardware
    enable_clocks();
 8000328:	f7ff ffaa 	bl	8000280 <enable_clocks>
    initialise_board();
 800032c:	f7ff ffb8 	bl	80002a0 <initialise_board>
    enable_interrupt();
 8000330:	f7ff ffce 	bl	80002d0 <enable_interrupt>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}

08000338 <dio_toggle_led_halves>:

/**
 * @brief Toggle between first half and second half LEDs
 */
void dio_toggle_led_halves(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800033e:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <dio_toggle_led_halves+0x34>)
 8000340:	607b      	str	r3, [r7, #4]
    uint8_t current_state = *led_register;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	70fb      	strb	r3, [r7, #3]

    // Check which half is currently on and toggle
    if ((current_state & 0xF0) == 0xF0) {
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800034e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000350:	d103      	bne.n	800035a <dio_toggle_led_halves+0x22>
        // Upper half is on, switch to lower half
        *led_register = 0x0F;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	220f      	movs	r2, #15
 8000356:	701a      	strb	r2, [r3, #0]
    } else {
        // Lower half is on or other state, switch to upper half
        *led_register = 0xF0;
    }
}
 8000358:	e002      	b.n	8000360 <dio_toggle_led_halves+0x28>
        *led_register = 0xF0;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	22f0      	movs	r2, #240	@ 0xf0
 800035e:	701a      	strb	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	48001015 	.word	0x48001015

08000370 <main>:
#include "dio.h"


//main function - loop
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
    // initialise digital i/o
    dio_init();
 8000374:	f7ff ffd6 	bl	8000324 <dio_init>

    // loop 4ever
    for(;;) {
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <main+0x8>

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ffdf 	bl	8000370 <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	2000001c 	.word	0x2000001c

080003cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_2_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	@ (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
